
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SearchHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SearchHistory
 * 
 */
export type SearchHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$SearchHistoryPayload>

export type AggregateSearchHistory = {
  _count: SearchHistoryCountAggregateOutputType | null
  _avg: SearchHistoryAvgAggregateOutputType | null
  _sum: SearchHistorySumAggregateOutputType | null
  _min: SearchHistoryMinAggregateOutputType | null
  _max: SearchHistoryMaxAggregateOutputType | null
}

export type SearchHistoryAvgAggregateOutputType = {
  resultCount: number | null
}

export type SearchHistorySumAggregateOutputType = {
  resultCount: number | null
}

export type SearchHistoryMinAggregateOutputType = {
  id: string | null
  userId: string | null
  resultCount: number | null
  createdAt: Date | null
}

export type SearchHistoryMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  resultCount: number | null
  createdAt: Date | null
}

export type SearchHistoryCountAggregateOutputType = {
  id: number
  userId: number
  parameters: number
  resultCount: number
  createdAt: number
  _all: number
}


export type SearchHistoryAvgAggregateInputType = {
  resultCount?: true
}

export type SearchHistorySumAggregateInputType = {
  resultCount?: true
}

export type SearchHistoryMinAggregateInputType = {
  id?: true
  userId?: true
  resultCount?: true
  createdAt?: true
}

export type SearchHistoryMaxAggregateInputType = {
  id?: true
  userId?: true
  resultCount?: true
  createdAt?: true
}

export type SearchHistoryCountAggregateInputType = {
  id?: true
  userId?: true
  parameters?: true
  resultCount?: true
  createdAt?: true
  _all?: true
}

export type SearchHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SearchHistory to aggregate.
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchHistories to fetch.
   */
  orderBy?: Prisma.SearchHistoryOrderByWithRelationInput | Prisma.SearchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SearchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SearchHistories
  **/
  _count?: true | SearchHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SearchHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SearchHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SearchHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SearchHistoryMaxAggregateInputType
}

export type GetSearchHistoryAggregateType<T extends SearchHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateSearchHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSearchHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateSearchHistory[P]>
}




export type SearchHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SearchHistoryWhereInput
  orderBy?: Prisma.SearchHistoryOrderByWithAggregationInput | Prisma.SearchHistoryOrderByWithAggregationInput[]
  by: Prisma.SearchHistoryScalarFieldEnum[] | Prisma.SearchHistoryScalarFieldEnum
  having?: Prisma.SearchHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SearchHistoryCountAggregateInputType | true
  _avg?: SearchHistoryAvgAggregateInputType
  _sum?: SearchHistorySumAggregateInputType
  _min?: SearchHistoryMinAggregateInputType
  _max?: SearchHistoryMaxAggregateInputType
}

export type SearchHistoryGroupByOutputType = {
  id: string
  userId: string
  parameters: runtime.JsonValue
  resultCount: number
  createdAt: Date
  _count: SearchHistoryCountAggregateOutputType | null
  _avg: SearchHistoryAvgAggregateOutputType | null
  _sum: SearchHistorySumAggregateOutputType | null
  _min: SearchHistoryMinAggregateOutputType | null
  _max: SearchHistoryMaxAggregateOutputType | null
}

type GetSearchHistoryGroupByPayload<T extends SearchHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SearchHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SearchHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SearchHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SearchHistoryGroupByOutputType[P]>
      }
    >
  >



export type SearchHistoryWhereInput = {
  AND?: Prisma.SearchHistoryWhereInput | Prisma.SearchHistoryWhereInput[]
  OR?: Prisma.SearchHistoryWhereInput[]
  NOT?: Prisma.SearchHistoryWhereInput | Prisma.SearchHistoryWhereInput[]
  id?: Prisma.StringFilter<"SearchHistory"> | string
  userId?: Prisma.StringFilter<"SearchHistory"> | string
  parameters?: Prisma.JsonFilter<"SearchHistory">
  resultCount?: Prisma.IntFilter<"SearchHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"SearchHistory"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  leads?: Prisma.LeadListRelationFilter
}

export type SearchHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  parameters?: Prisma.SortOrder
  resultCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  leads?: Prisma.LeadOrderByRelationAggregateInput
}

export type SearchHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SearchHistoryWhereInput | Prisma.SearchHistoryWhereInput[]
  OR?: Prisma.SearchHistoryWhereInput[]
  NOT?: Prisma.SearchHistoryWhereInput | Prisma.SearchHistoryWhereInput[]
  userId?: Prisma.StringFilter<"SearchHistory"> | string
  parameters?: Prisma.JsonFilter<"SearchHistory">
  resultCount?: Prisma.IntFilter<"SearchHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"SearchHistory"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  leads?: Prisma.LeadListRelationFilter
}, "id">

export type SearchHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  parameters?: Prisma.SortOrder
  resultCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.SearchHistoryCountOrderByAggregateInput
  _avg?: Prisma.SearchHistoryAvgOrderByAggregateInput
  _max?: Prisma.SearchHistoryMaxOrderByAggregateInput
  _min?: Prisma.SearchHistoryMinOrderByAggregateInput
  _sum?: Prisma.SearchHistorySumOrderByAggregateInput
}

export type SearchHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.SearchHistoryScalarWhereWithAggregatesInput | Prisma.SearchHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.SearchHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SearchHistoryScalarWhereWithAggregatesInput | Prisma.SearchHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SearchHistory"> | string
  userId?: Prisma.StringWithAggregatesFilter<"SearchHistory"> | string
  parameters?: Prisma.JsonWithAggregatesFilter<"SearchHistory">
  resultCount?: Prisma.IntWithAggregatesFilter<"SearchHistory"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SearchHistory"> | Date | string
}

export type SearchHistoryCreateInput = {
  id?: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSearchHistoryInput
  leads?: Prisma.LeadCreateNestedManyWithoutSearchHistoryInput
}

export type SearchHistoryUncheckedCreateInput = {
  id?: string
  userId: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
  leads?: Prisma.LeadUncheckedCreateNestedManyWithoutSearchHistoryInput
}

export type SearchHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSearchHistoryNestedInput
  leads?: Prisma.LeadUpdateManyWithoutSearchHistoryNestedInput
}

export type SearchHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leads?: Prisma.LeadUncheckedUpdateManyWithoutSearchHistoryNestedInput
}

export type SearchHistoryCreateManyInput = {
  id?: string
  userId: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
}

export type SearchHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchHistoryListRelationFilter = {
  every?: Prisma.SearchHistoryWhereInput
  some?: Prisma.SearchHistoryWhereInput
  none?: Prisma.SearchHistoryWhereInput
}

export type SearchHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SearchHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  parameters?: Prisma.SortOrder
  resultCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SearchHistoryAvgOrderByAggregateInput = {
  resultCount?: Prisma.SortOrder
}

export type SearchHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  resultCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SearchHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  resultCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SearchHistorySumOrderByAggregateInput = {
  resultCount?: Prisma.SortOrder
}

export type SearchHistoryScalarRelationFilter = {
  is?: Prisma.SearchHistoryWhereInput
  isNot?: Prisma.SearchHistoryWhereInput
}

export type SearchHistoryCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SearchHistoryCreateWithoutUserInput, Prisma.SearchHistoryUncheckedCreateWithoutUserInput> | Prisma.SearchHistoryCreateWithoutUserInput[] | Prisma.SearchHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SearchHistoryCreateOrConnectWithoutUserInput | Prisma.SearchHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SearchHistoryCreateManyUserInputEnvelope
  connect?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
}

export type SearchHistoryUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SearchHistoryCreateWithoutUserInput, Prisma.SearchHistoryUncheckedCreateWithoutUserInput> | Prisma.SearchHistoryCreateWithoutUserInput[] | Prisma.SearchHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SearchHistoryCreateOrConnectWithoutUserInput | Prisma.SearchHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SearchHistoryCreateManyUserInputEnvelope
  connect?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
}

export type SearchHistoryUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SearchHistoryCreateWithoutUserInput, Prisma.SearchHistoryUncheckedCreateWithoutUserInput> | Prisma.SearchHistoryCreateWithoutUserInput[] | Prisma.SearchHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SearchHistoryCreateOrConnectWithoutUserInput | Prisma.SearchHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SearchHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.SearchHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SearchHistoryCreateManyUserInputEnvelope
  set?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  disconnect?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  delete?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  connect?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  update?: Prisma.SearchHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.SearchHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SearchHistoryUpdateManyWithWhereWithoutUserInput | Prisma.SearchHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SearchHistoryScalarWhereInput | Prisma.SearchHistoryScalarWhereInput[]
}

export type SearchHistoryUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SearchHistoryCreateWithoutUserInput, Prisma.SearchHistoryUncheckedCreateWithoutUserInput> | Prisma.SearchHistoryCreateWithoutUserInput[] | Prisma.SearchHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SearchHistoryCreateOrConnectWithoutUserInput | Prisma.SearchHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SearchHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.SearchHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SearchHistoryCreateManyUserInputEnvelope
  set?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  disconnect?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  delete?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  connect?: Prisma.SearchHistoryWhereUniqueInput | Prisma.SearchHistoryWhereUniqueInput[]
  update?: Prisma.SearchHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.SearchHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SearchHistoryUpdateManyWithWhereWithoutUserInput | Prisma.SearchHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SearchHistoryScalarWhereInput | Prisma.SearchHistoryScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type SearchHistoryCreateNestedOneWithoutLeadsInput = {
  create?: Prisma.XOR<Prisma.SearchHistoryCreateWithoutLeadsInput, Prisma.SearchHistoryUncheckedCreateWithoutLeadsInput>
  connectOrCreate?: Prisma.SearchHistoryCreateOrConnectWithoutLeadsInput
  connect?: Prisma.SearchHistoryWhereUniqueInput
}

export type SearchHistoryUpdateOneRequiredWithoutLeadsNestedInput = {
  create?: Prisma.XOR<Prisma.SearchHistoryCreateWithoutLeadsInput, Prisma.SearchHistoryUncheckedCreateWithoutLeadsInput>
  connectOrCreate?: Prisma.SearchHistoryCreateOrConnectWithoutLeadsInput
  upsert?: Prisma.SearchHistoryUpsertWithoutLeadsInput
  connect?: Prisma.SearchHistoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SearchHistoryUpdateToOneWithWhereWithoutLeadsInput, Prisma.SearchHistoryUpdateWithoutLeadsInput>, Prisma.SearchHistoryUncheckedUpdateWithoutLeadsInput>
}

export type SearchHistoryCreateWithoutUserInput = {
  id?: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
  leads?: Prisma.LeadCreateNestedManyWithoutSearchHistoryInput
}

export type SearchHistoryUncheckedCreateWithoutUserInput = {
  id?: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
  leads?: Prisma.LeadUncheckedCreateNestedManyWithoutSearchHistoryInput
}

export type SearchHistoryCreateOrConnectWithoutUserInput = {
  where: Prisma.SearchHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.SearchHistoryCreateWithoutUserInput, Prisma.SearchHistoryUncheckedCreateWithoutUserInput>
}

export type SearchHistoryCreateManyUserInputEnvelope = {
  data: Prisma.SearchHistoryCreateManyUserInput | Prisma.SearchHistoryCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type SearchHistoryUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SearchHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.SearchHistoryUpdateWithoutUserInput, Prisma.SearchHistoryUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SearchHistoryCreateWithoutUserInput, Prisma.SearchHistoryUncheckedCreateWithoutUserInput>
}

export type SearchHistoryUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SearchHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.SearchHistoryUpdateWithoutUserInput, Prisma.SearchHistoryUncheckedUpdateWithoutUserInput>
}

export type SearchHistoryUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SearchHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.SearchHistoryUpdateManyMutationInput, Prisma.SearchHistoryUncheckedUpdateManyWithoutUserInput>
}

export type SearchHistoryScalarWhereInput = {
  AND?: Prisma.SearchHistoryScalarWhereInput | Prisma.SearchHistoryScalarWhereInput[]
  OR?: Prisma.SearchHistoryScalarWhereInput[]
  NOT?: Prisma.SearchHistoryScalarWhereInput | Prisma.SearchHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"SearchHistory"> | string
  userId?: Prisma.StringFilter<"SearchHistory"> | string
  parameters?: Prisma.JsonFilter<"SearchHistory">
  resultCount?: Prisma.IntFilter<"SearchHistory"> | number
  createdAt?: Prisma.DateTimeFilter<"SearchHistory"> | Date | string
}

export type SearchHistoryCreateWithoutLeadsInput = {
  id?: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSearchHistoryInput
}

export type SearchHistoryUncheckedCreateWithoutLeadsInput = {
  id?: string
  userId: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
}

export type SearchHistoryCreateOrConnectWithoutLeadsInput = {
  where: Prisma.SearchHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.SearchHistoryCreateWithoutLeadsInput, Prisma.SearchHistoryUncheckedCreateWithoutLeadsInput>
}

export type SearchHistoryUpsertWithoutLeadsInput = {
  update: Prisma.XOR<Prisma.SearchHistoryUpdateWithoutLeadsInput, Prisma.SearchHistoryUncheckedUpdateWithoutLeadsInput>
  create: Prisma.XOR<Prisma.SearchHistoryCreateWithoutLeadsInput, Prisma.SearchHistoryUncheckedCreateWithoutLeadsInput>
  where?: Prisma.SearchHistoryWhereInput
}

export type SearchHistoryUpdateToOneWithWhereWithoutLeadsInput = {
  where?: Prisma.SearchHistoryWhereInput
  data: Prisma.XOR<Prisma.SearchHistoryUpdateWithoutLeadsInput, Prisma.SearchHistoryUncheckedUpdateWithoutLeadsInput>
}

export type SearchHistoryUpdateWithoutLeadsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSearchHistoryNestedInput
}

export type SearchHistoryUncheckedUpdateWithoutLeadsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchHistoryCreateManyUserInput = {
  id?: string
  parameters: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount: number
  createdAt?: Date | string
}

export type SearchHistoryUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leads?: Prisma.LeadUpdateManyWithoutSearchHistoryNestedInput
}

export type SearchHistoryUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  leads?: Prisma.LeadUncheckedUpdateManyWithoutSearchHistoryNestedInput
}

export type SearchHistoryUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  parameters?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SearchHistoryCountOutputType
 */

export type SearchHistoryCountOutputType = {
  leads: number
}

export type SearchHistoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leads?: boolean | SearchHistoryCountOutputTypeCountLeadsArgs
}

/**
 * SearchHistoryCountOutputType without action
 */
export type SearchHistoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistoryCountOutputType
   */
  select?: Prisma.SearchHistoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SearchHistoryCountOutputType without action
 */
export type SearchHistoryCountOutputTypeCountLeadsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LeadWhereInput
}


export type SearchHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  parameters?: boolean
  resultCount?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  leads?: boolean | Prisma.SearchHistory$leadsArgs<ExtArgs>
  _count?: boolean | Prisma.SearchHistoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["searchHistory"]>

export type SearchHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  parameters?: boolean
  resultCount?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["searchHistory"]>

export type SearchHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  parameters?: boolean
  resultCount?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["searchHistory"]>

export type SearchHistorySelectScalar = {
  id?: boolean
  userId?: boolean
  parameters?: boolean
  resultCount?: boolean
  createdAt?: boolean
}

export type SearchHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "parameters" | "resultCount" | "createdAt", ExtArgs["result"]["searchHistory"]>
export type SearchHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  leads?: boolean | Prisma.SearchHistory$leadsArgs<ExtArgs>
  _count?: boolean | Prisma.SearchHistoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type SearchHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SearchHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SearchHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SearchHistory"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    leads: Prisma.$LeadPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    parameters: runtime.JsonValue
    resultCount: number
    createdAt: Date
  }, ExtArgs["result"]["searchHistory"]>
  composites: {}
}

export type SearchHistoryGetPayload<S extends boolean | null | undefined | SearchHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload, S>

export type SearchHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SearchHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SearchHistoryCountAggregateInputType | true
  }

export interface SearchHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SearchHistory'], meta: { name: 'SearchHistory' } }
  /**
   * Find zero or one SearchHistory that matches the filter.
   * @param {SearchHistoryFindUniqueArgs} args - Arguments to find a SearchHistory
   * @example
   * // Get one SearchHistory
   * const searchHistory = await prisma.searchHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SearchHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, SearchHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SearchHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SearchHistoryFindUniqueOrThrowArgs} args - Arguments to find a SearchHistory
   * @example
   * // Get one SearchHistory
   * const searchHistory = await prisma.searchHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SearchHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SearchHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SearchHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryFindFirstArgs} args - Arguments to find a SearchHistory
   * @example
   * // Get one SearchHistory
   * const searchHistory = await prisma.searchHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SearchHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, SearchHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SearchHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryFindFirstOrThrowArgs} args - Arguments to find a SearchHistory
   * @example
   * // Get one SearchHistory
   * const searchHistory = await prisma.searchHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SearchHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SearchHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SearchHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SearchHistories
   * const searchHistories = await prisma.searchHistory.findMany()
   * 
   * // Get first 10 SearchHistories
   * const searchHistories = await prisma.searchHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const searchHistoryWithIdOnly = await prisma.searchHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SearchHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, SearchHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SearchHistory.
   * @param {SearchHistoryCreateArgs} args - Arguments to create a SearchHistory.
   * @example
   * // Create one SearchHistory
   * const SearchHistory = await prisma.searchHistory.create({
   *   data: {
   *     // ... data to create a SearchHistory
   *   }
   * })
   * 
   */
  create<T extends SearchHistoryCreateArgs>(args: Prisma.SelectSubset<T, SearchHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SearchHistories.
   * @param {SearchHistoryCreateManyArgs} args - Arguments to create many SearchHistories.
   * @example
   * // Create many SearchHistories
   * const searchHistory = await prisma.searchHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SearchHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, SearchHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SearchHistories and returns the data saved in the database.
   * @param {SearchHistoryCreateManyAndReturnArgs} args - Arguments to create many SearchHistories.
   * @example
   * // Create many SearchHistories
   * const searchHistory = await prisma.searchHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SearchHistories and only return the `id`
   * const searchHistoryWithIdOnly = await prisma.searchHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SearchHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SearchHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SearchHistory.
   * @param {SearchHistoryDeleteArgs} args - Arguments to delete one SearchHistory.
   * @example
   * // Delete one SearchHistory
   * const SearchHistory = await prisma.searchHistory.delete({
   *   where: {
   *     // ... filter to delete one SearchHistory
   *   }
   * })
   * 
   */
  delete<T extends SearchHistoryDeleteArgs>(args: Prisma.SelectSubset<T, SearchHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SearchHistory.
   * @param {SearchHistoryUpdateArgs} args - Arguments to update one SearchHistory.
   * @example
   * // Update one SearchHistory
   * const searchHistory = await prisma.searchHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SearchHistoryUpdateArgs>(args: Prisma.SelectSubset<T, SearchHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SearchHistories.
   * @param {SearchHistoryDeleteManyArgs} args - Arguments to filter SearchHistories to delete.
   * @example
   * // Delete a few SearchHistories
   * const { count } = await prisma.searchHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SearchHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, SearchHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SearchHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SearchHistories
   * const searchHistory = await prisma.searchHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SearchHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, SearchHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SearchHistories and returns the data updated in the database.
   * @param {SearchHistoryUpdateManyAndReturnArgs} args - Arguments to update many SearchHistories.
   * @example
   * // Update many SearchHistories
   * const searchHistory = await prisma.searchHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SearchHistories and only return the `id`
   * const searchHistoryWithIdOnly = await prisma.searchHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SearchHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SearchHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SearchHistory.
   * @param {SearchHistoryUpsertArgs} args - Arguments to update or create a SearchHistory.
   * @example
   * // Update or create a SearchHistory
   * const searchHistory = await prisma.searchHistory.upsert({
   *   create: {
   *     // ... data to create a SearchHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SearchHistory we want to update
   *   }
   * })
   */
  upsert<T extends SearchHistoryUpsertArgs>(args: Prisma.SelectSubset<T, SearchHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__SearchHistoryClient<runtime.Types.Result.GetResult<Prisma.$SearchHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SearchHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryCountArgs} args - Arguments to filter SearchHistories to count.
   * @example
   * // Count the number of SearchHistories
   * const count = await prisma.searchHistory.count({
   *   where: {
   *     // ... the filter for the SearchHistories we want to count
   *   }
   * })
  **/
  count<T extends SearchHistoryCountArgs>(
    args?: Prisma.Subset<T, SearchHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SearchHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SearchHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SearchHistoryAggregateArgs>(args: Prisma.Subset<T, SearchHistoryAggregateArgs>): Prisma.PrismaPromise<GetSearchHistoryAggregateType<T>>

  /**
   * Group by SearchHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SearchHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SearchHistoryGroupByArgs['orderBy'] }
      : { orderBy?: SearchHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SearchHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSearchHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SearchHistory model
 */
readonly fields: SearchHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SearchHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SearchHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leads<T extends Prisma.SearchHistory$leadsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SearchHistory$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SearchHistory model
 */
export interface SearchHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"SearchHistory", 'String'>
  readonly userId: Prisma.FieldRef<"SearchHistory", 'String'>
  readonly parameters: Prisma.FieldRef<"SearchHistory", 'Json'>
  readonly resultCount: Prisma.FieldRef<"SearchHistory", 'Int'>
  readonly createdAt: Prisma.FieldRef<"SearchHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SearchHistory findUnique
 */
export type SearchHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which SearchHistory to fetch.
   */
  where: Prisma.SearchHistoryWhereUniqueInput
}

/**
 * SearchHistory findUniqueOrThrow
 */
export type SearchHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which SearchHistory to fetch.
   */
  where: Prisma.SearchHistoryWhereUniqueInput
}

/**
 * SearchHistory findFirst
 */
export type SearchHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which SearchHistory to fetch.
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchHistories to fetch.
   */
  orderBy?: Prisma.SearchHistoryOrderByWithRelationInput | Prisma.SearchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SearchHistories.
   */
  cursor?: Prisma.SearchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SearchHistories.
   */
  distinct?: Prisma.SearchHistoryScalarFieldEnum | Prisma.SearchHistoryScalarFieldEnum[]
}

/**
 * SearchHistory findFirstOrThrow
 */
export type SearchHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which SearchHistory to fetch.
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchHistories to fetch.
   */
  orderBy?: Prisma.SearchHistoryOrderByWithRelationInput | Prisma.SearchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SearchHistories.
   */
  cursor?: Prisma.SearchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SearchHistories.
   */
  distinct?: Prisma.SearchHistoryScalarFieldEnum | Prisma.SearchHistoryScalarFieldEnum[]
}

/**
 * SearchHistory findMany
 */
export type SearchHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * Filter, which SearchHistories to fetch.
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchHistories to fetch.
   */
  orderBy?: Prisma.SearchHistoryOrderByWithRelationInput | Prisma.SearchHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SearchHistories.
   */
  cursor?: Prisma.SearchHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchHistories.
   */
  skip?: number
  distinct?: Prisma.SearchHistoryScalarFieldEnum | Prisma.SearchHistoryScalarFieldEnum[]
}

/**
 * SearchHistory create
 */
export type SearchHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a SearchHistory.
   */
  data: Prisma.XOR<Prisma.SearchHistoryCreateInput, Prisma.SearchHistoryUncheckedCreateInput>
}

/**
 * SearchHistory createMany
 */
export type SearchHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SearchHistories.
   */
  data: Prisma.SearchHistoryCreateManyInput | Prisma.SearchHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SearchHistory createManyAndReturn
 */
export type SearchHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many SearchHistories.
   */
  data: Prisma.SearchHistoryCreateManyInput | Prisma.SearchHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SearchHistory update
 */
export type SearchHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a SearchHistory.
   */
  data: Prisma.XOR<Prisma.SearchHistoryUpdateInput, Prisma.SearchHistoryUncheckedUpdateInput>
  /**
   * Choose, which SearchHistory to update.
   */
  where: Prisma.SearchHistoryWhereUniqueInput
}

/**
 * SearchHistory updateMany
 */
export type SearchHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SearchHistories.
   */
  data: Prisma.XOR<Prisma.SearchHistoryUpdateManyMutationInput, Prisma.SearchHistoryUncheckedUpdateManyInput>
  /**
   * Filter which SearchHistories to update
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * Limit how many SearchHistories to update.
   */
  limit?: number
}

/**
 * SearchHistory updateManyAndReturn
 */
export type SearchHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * The data used to update SearchHistories.
   */
  data: Prisma.XOR<Prisma.SearchHistoryUpdateManyMutationInput, Prisma.SearchHistoryUncheckedUpdateManyInput>
  /**
   * Filter which SearchHistories to update
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * Limit how many SearchHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SearchHistory upsert
 */
export type SearchHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the SearchHistory to update in case it exists.
   */
  where: Prisma.SearchHistoryWhereUniqueInput
  /**
   * In case the SearchHistory found by the `where` argument doesn't exist, create a new SearchHistory with this data.
   */
  create: Prisma.XOR<Prisma.SearchHistoryCreateInput, Prisma.SearchHistoryUncheckedCreateInput>
  /**
   * In case the SearchHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SearchHistoryUpdateInput, Prisma.SearchHistoryUncheckedUpdateInput>
}

/**
 * SearchHistory delete
 */
export type SearchHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
  /**
   * Filter which SearchHistory to delete.
   */
  where: Prisma.SearchHistoryWhereUniqueInput
}

/**
 * SearchHistory deleteMany
 */
export type SearchHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SearchHistories to delete
   */
  where?: Prisma.SearchHistoryWhereInput
  /**
   * Limit how many SearchHistories to delete.
   */
  limit?: number
}

/**
 * SearchHistory.leads
 */
export type SearchHistory$leadsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Lead
   */
  select?: Prisma.LeadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Lead
   */
  omit?: Prisma.LeadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LeadInclude<ExtArgs> | null
  where?: Prisma.LeadWhereInput
  orderBy?: Prisma.LeadOrderByWithRelationInput | Prisma.LeadOrderByWithRelationInput[]
  cursor?: Prisma.LeadWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LeadScalarFieldEnum | Prisma.LeadScalarFieldEnum[]
}

/**
 * SearchHistory without action
 */
export type SearchHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchHistory
   */
  select?: Prisma.SearchHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchHistory
   */
  omit?: Prisma.SearchHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SearchHistoryInclude<ExtArgs> | null
}
